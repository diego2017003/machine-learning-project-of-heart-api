diff --git a/api/__pycache__/__init__.cpython-310.pyc b/api/__pycache__/__init__.cpython-310.pyc
index d8a7da1..160e716 100644
Binary files a/api/__pycache__/__init__.cpython-310.pyc and b/api/__pycache__/__init__.cpython-310.pyc differ
diff --git a/api/__pycache__/main.cpython-310.pyc b/api/__pycache__/main.cpython-310.pyc
index f72bf2d..b5a670b 100644
Binary files a/api/__pycache__/main.cpython-310.pyc and b/api/__pycache__/main.cpython-310.pyc differ
diff --git a/api/__pycache__/preprocessing.cpython-310.pyc b/api/__pycache__/preprocessing.cpython-310.pyc
index a48fb44..2bfe7cf 100644
Binary files a/api/__pycache__/preprocessing.cpython-310.pyc and b/api/__pycache__/preprocessing.cpython-310.pyc differ
diff --git a/api/__pycache__/train.cpython-310.pyc b/api/__pycache__/train.cpython-310.pyc
deleted file mode 100644
index 1e0d34c..0000000
Binary files a/api/__pycache__/train.cpython-310.pyc and /dev/null differ
diff --git a/api/main.py b/api/main.py
deleted file mode 100644
index adaa930..0000000
--- a/api/main.py
+++ /dev/null
@@ -1,77 +0,0 @@
-from fastapi import FastAPI
-from pydantic import BaseModel
-import joblib
-import pickle
-import wandb
-import pandas as pd
-import sys
-
-from source.mlops.api.preprocessing import *
-
-app = FastAPI()
-
-# Creating a class for the attributes input to the ML model.
-class Heart_metrics(BaseModel):
-    BMI: float
-    Smoking: str
-    AlcoholDrinking: str
-    Stroke: str
-    PhysicalHealth: float
-    MentalHealth: float
-    DiffWalking: str
-    Sex: str
-    AgeCategory: str
-    Race: str
-    Diabetic: str
-    PhysicalActivity: str
-    GenHealth: str
-    SleepTime: float
-    Asthma: str
-    KidneyDisease: str
-    SkinCancer: str
-
-    class config:
-        schema_extra = {
-            "example": {
-                "BMI": 16.4,
-                "Smoking": "Yes",
-                "AlcoholDrinking": "No",
-                "Stroke": "No",
-                "PhysicalHealth": 3.0,
-                "MentalHealth": 30.0,
-                "DiffWalking": "No",
-                "Sex": "Female",
-                "AgeCategory": "55-59",
-                "Race": "White",
-                "Diabetic": "Yes",
-                "PhysicalActivity": "Yes",
-                "GenHealth": "Very good",
-                "SleepTime": 5.0,
-                "Asthma": "Yes",
-                "KidneyDisease": "No",
-                "SkinCancer": "Yes",
-            }
-        }
-
-
-run = wandb.init(project="project_heart", job_type="api", save_code=True)
-
-
-@app.get("/")
-async def home():
-    return {"Hello": "World"}
-
-
-@app.post("/prediction")
-async def heart_prediciton(data: Heart_metrics):
-    run = wandb.init(project="project_heart", job_type="api")
-    artifact = run.use_artifact(
-        "diego25rm/project_heart/model_export:v4", type="pipeline_artifact"
-    ).file()
-    # try:
-    loaded_model = joblib.load(artifact)
-    X = pd.DataFrame([data])
-    prediction = loaded_model.predict(X)
-    return {"Prediction": prediction}
-    # except:
-    #     return artifact
diff --git a/api/train.py b/api/train.py
deleted file mode 100644
index 1c93cc5..0000000
--- a/api/train.py
+++ /dev/null
@@ -1,45 +0,0 @@
-from sklearn.tree import DecisionTreeClassifier
-from sklearn.model_selection import train_test_split
-from sklearn.preprocessing import LabelEncoder
-
-from source.mlops.modules.preprocessing import *
-
-
-class Target_encoder(BaseEstimator, TransformerMixin):
-    def __init__(self) -> None:
-        return None
-
-    def fit(self, y):
-        self.encoder = LabelEncoder()
-        self.encoder.fit(y)
-
-    def transform(self, y):
-        return self.encoder.fit_transform(y)
-
-
-class Model_pipeline(BaseEstimator, TransformerMixin):
-    def __init__(self, model="decisionTreeClassifier"):
-        self.model = model
-
-    def fit(self, X, y):
-        self.model_pipeline = Pipeline(
-            steps=[
-                ("preprocess", pipeline_preprocessing()),
-                (
-                    "train",
-                    DecisionTreeClassifier(
-                        criterion="gini", splitter="best", max_depth=4
-                    ),
-                ),
-            ]
-        )
-        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)
-        self.model_pipeline.fit(X_train, y_train)
-        return self
-
-    def predict(self, X):
-        return self.model_pipeline.predict(X)
-
-    def transform(self, X, y):
-        self.model_pipeline.transform(X, y)
-        return self.model_pipeline
